#-*-coding:utf-8-*- 
def  v_add(v1,  v2):
        x=v1[0]+v2[0]
        y=v1[1]+v2[1]
        z=v1[2]+v2[2]
        return [x ,y,z]
import math
v1 = [1,2,3]
v2 = [4,5,6]
#向量加法运算
#等价于v3 = v1+v2
v3=v_add(v1,v2)
print '向量加法运算'
print 'v1=',v3

def  v_sub(v1,  v2):
        a=v1[0]-v2[0]
        b=v1[1]-v2[1]
        c=v1[2]-v2[2]
        return [a ,b,c]
import math
v1 = [1,2,3]
v2 = [4,5,6]
#向量减法运算
#等价于v3 = v1-v2
v3=v_sub(v1,v2)
print '向量减法运算'
print 'v2=',v3

v1 = [1,2,3]
v2 = [4,5,6]
def  v_dot(v1,  v2):
     a=v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2]
     return a
v3=v_dot(v1,  v2)
#向量点乘运算
#等价于v3 = v1・v2 
print '向量点乘运算'
print 'v3=',v3

v1 = [1,2,3]
v2 = [4,5,6]
def  v_cross(v1,  v2):
     a=v1[1]*v2[2]-v2[1]*v1[2]
     b=v1[2]*v2[0]-v1[0]*v2[2]
     c=v1[0]*v2[1]-v2[1]*v1[0]
     return [a,b,c]
import math
#向量叉乘运算
#等价于v4 = v1*v2     
v4=v_cross(v1,v2)
print '向量叉乘运算'
print 'v4=',v4

A = [
[1,2,3],
[4,5,6],
[7,8,9]
]
B = [
[5,2,0],
[4,5,7],
[1,9,9]
]
def m_add(A,B):
    C = [
    [0,0,0],
    [0,0,0],
    [0,0,0]
    ]
    C[0][0]=A[0][0]+B[0][0]  # c11=a11+b11
    C[0][1]=A[0][1]+B[0][1]  # c11=a11+b11
    C[0][2]=A[0][2]+B[0][2]  # c11=a11+b11
    C[1][0]=A[1][0]+B[1][0]  # c11=a11+b11
    C[1][1]=A[1][1]+B[1][1]  # c11=a11+b11
    C[1][2]=A[1][2]+B[1][2]  # c11=a11+b11
    C[2][0]=A[2][0]+B[2][0]  # c11=a11+b11
    C[2][1]=A[2][0]+B[2][0]  # c11=a11+b11
    C[2][2]=A[2][2]+B[2][2]  # c11=a11+b11
    return C
import math
#矩阵加法运算
#等价于C = A+B     
v5=m_add(A, B)
print '矩阵加法运算'
print 'v5',v5


A = [
[1,2,3],
[4,5,6],
[7,8,9]
]
B = [
[5,2,0],
[4,5,7],
[1,9,9]
]
def m_sub(A,B):
    C = [
    [0,0,0],
    [0,0,0],
    [0,0,0]
    ]
    C[0][0]=A[0][0]-B[0][0]  # c11=a11-b11
    C[0][1]=A[0][1]-B[0][1]  # c11=a11-b11
    C[0][2]=A[0][2]-B[0][2]  # c11=a11-b11
    C[1][0]=A[1][0]-B[1][0]  # c11=a11-b11
    C[1][1]=A[1][1]-B[1][1]  # c11=a11-b11
    C[1][2]=A[1][2]-B[1][2]  # c11=a11-b11
    C[2][0]=A[2][0]-B[2][0]  # c11=a11-b11
    C[2][1]=A[2][0]-B[2][0]  # c11=a11-b11
    C[2][2]=A[2][2]-B[2][2]  # c11=a11-b11
    return C
import math
#矩阵加法运算
#等价于C = A-B     
v6=m_sub(A, B)
print '矩阵减法运算'
print 'v6',v6

A = [
[1,2,3],
[4,5,6],
[7,8,9]
]
B = [
[5,2,0],
[4,5,7],
[1,9,9]
]
def m_dot(A,B):
    C = [
    [0,0,0],
    [0,0,0],
    [0,0,0]
    ]
    C[0][0]=A[0][0]*B[0][0]+A[0][1]*B[1][0]+A[0][2]*B[2][0]  # c11=a11*b11+a12*b21+a13*b31
    C[0][1]=A[0][0]*B[0][1]+A[0][1]*B[1][1]+A[0][2]*B[2][1]  # c12=a11*b12+a12*b22+a13*b23
    C[0][2]=A[0][0]*B[0][2]+A[0][1]*B[1][2]+A[0][2]*B[2][2]  # c13=a11*b13+a12*b23+a13*b33   
    C[1][0]=A[1][0]*B[0][0]+A[1][1]*B[1][0]+A[1][2]*B[2][0]  # c21=a21*b11+a22*b21+a23*b31
    C[1][1]=A[1][0]*B[0][1]+A[1][1]*B[1][1]+A[1][2]*B[2][1]  # c22=a21*b12+a22*b22+a23*b32
    C[1][2]=A[1][0]*B[0][2]+A[1][1]*B[1][2]+A[1][2]*B[2][2]  # c23=a21*b13+a22*b23+a23*b33
    C[2][0]=A[2][0]*B[0][0]+A[2][1]*B[1][0]+A[2][2]*B[2][0]  # c31=a31*b11+a32*b21+a33*b31
    C[2][1]=A[2][0]*B[0][1]+A[2][1]*B[1][1]+A[2][2]*B[2][1]  # c32=a31*b12+a32*b22+a33*b32
    C[2][2]=A[2][0]*B[0][2]+A[2][1]*B[1][2]+A[2][2]*B[2][2]  # c33=a31*b13+a32*b23+a33*b33
    return C
import math
#矩阵加法运算
#等价于C = A-B     
v7=m_dot(A, B)
print '矩阵乘法运算'
print 'v7',v7

A=[1,2,3]
B = [
[5,2,0],
[4,5,7],
[1,9,9]
]
def mv_dot(A,B):   
    E=[0,0,0]
    E[0]=A[0]*B[0][0]+A[0]*B[1][0]+A[0]*B[2][0]  # e11=a11*b11+a11*b21+a11*b31
    E[1]=A[1]*B[0][1]+A[1]*B[1][1]+A[1]*B[1][2]  # e12=a12*b12+a12*b22+a12*b23
    E[2]=A[2]*B[0][2]+A[2]*B[1][2]+A[2]*B[2][2]  # e13=a13*b13+a13*b23+a13*b33 
    return E
import math
#矩阵和向量的乘法运算
#等价于E=A*B
v8=mv_dot(A, B)
print '矩阵和向量的乘法运算'
print 'v8',v8

J = [
[1,2,3,5],
[4,5,6,4],
[7,8,9,9],
[7,7,4,4]
]
def  m_nn(J):
     N=J[0][0]*J[1][1]*J[2][2]*J[3][3]-J[0][1]*J[1][2]*J[2][3]*J[3][0]+J[0][2]*J[1][3]*J[2][0]*J[3][1]-J[0][3]*J[1][0]*J[2][1]*J[3][2]+J[0][3]*J[1][2]*J[2][1]*J[3][0]-J[0][2]*J[1][1]*J[2][0]*J[3][3]+J[0][1]*J[1][0]*J[2][3]*J[3][2]-J[0][0]*J[1][3]*J[2][2]*J[3][1]                #n=j11*j22*j33*j44-j12*j23*j34*j41+j13*j24*j31*j42-j14*j21*j32*j43+j14*j23*j32*j41-j13*j22*j31*j44+j12*j21*j34*j43-j11*j24*j33*j42
     return N
v9=m_nn(J)
#4阶矩阵J的行列式
print '4阶矩阵J的行列式'
print 'v9',v9


K = [
[1,2,3,5],
[4,5,6,4],
[7,8,9,9],
[7,7,4,4]
]
L = [
[0,0,0,0], 
[0,0,0,0],
[0,0,0,0],
[0,0,0,0]
]
def m_njz(K,L):
    L[0][0]=K[0][0]
    L[0][1]=K[1][0]
    L[0][2]=K[2][0]
    L[0][3]=K[3][0]
    L[1][0]=K[0][1]
    L[1][1]=K[1][1]
    L[1][2]=K[2][1]
    L[1][3]=K[3][1]
    L[2][0]=K[0][2]
    L[2][1]=K[1][2]
    L[2][2]=K[2][2]
    L[2][3]=K[3][2]
    L[3][0]=K[0][3]
    L[3][1]=K[1][3]
    L[3][2]=K[2][3]
    L[3][3]=K[3][3]
    return L
import math
#4阶矩阵的逆矩阵
v10=m_njz(K,L)
print '4阶矩阵的逆矩阵'
print 'v10',v10
print '.......................................................'
print '程太阳:整理数据以及编写代码 '
print '刘天威:撰写报告以及答辩演讲'
print '.......................................................'






